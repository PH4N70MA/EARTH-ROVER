
LineFallower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f37  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d57  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000548  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000076e  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000212  00000000  00000000  00002d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	7a d0       	rcall	.+244    	; 0x1ea <main>
  f6:	8d c0       	rjmp	.+282    	; 0x212 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <ADC_init>:
#include <math.h>
#include "IRADC.h"

void ADC_init(void)
{
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //ADC Enable, ADC Interrupt Enable, Prescaler 128
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	87 68       	ori	r24, 0x87	; 135
 102:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);  //AVCC with external capacitor at AREF pin
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	PORTA = (1<<PA0);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	82 b9       	out	0x02, r24	; 2
 112:	08 95       	ret

00000114 <ADC_read>:
}

uint16_t ADC_read(SensorPin channel)
{
	switch(channel)
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d1 f0       	breq	.+52     	; 0x14c <ADC_read+0x38>
 118:	28 f4       	brcc	.+10     	; 0x124 <ADC_read+0x10>
 11a:	88 23       	and	r24, r24
 11c:	41 f0       	breq	.+16     	; 0x12e <ADC_read+0x1a>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	61 f0       	breq	.+24     	; 0x13a <ADC_read+0x26>
 122:	2e c0       	rjmp	.+92     	; 0x180 <ADC_read+0x6c>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	d9 f0       	breq	.+54     	; 0x15e <ADC_read+0x4a>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	11 f1       	breq	.+68     	; 0x170 <ADC_read+0x5c>
 12c:	29 c0       	rjmp	.+82     	; 0x180 <ADC_read+0x6c>
	{
		case sensorOne:
		ADMUX &=~ 0x1F;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 7e       	andi	r24, 0xE0	; 224
 136:	80 83       	st	Z, r24
		break;
 138:	23 c0       	rjmp	.+70     	; 0x180 <ADC_read+0x6c>
		case sensorTwo:
		ADMUX &=~ 0x1F;
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 7e       	andi	r24, 0xE0	; 224
 142:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
		break;
 14a:	1a c0       	rjmp	.+52     	; 0x180 <ADC_read+0x6c>
		case sensorThree:
		ADMUX &=~ 0x1F;
 14c:	ec e7       	ldi	r30, 0x7C	; 124
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 7e       	andi	r24, 0xE0	; 224
 154:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
		break;
 15c:	11 c0       	rjmp	.+34     	; 0x180 <ADC_read+0x6c>
		case sensorFour:
		ADMUX &=~ 0x1F;
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 7e       	andi	r24, 0xE0	; 224
 166:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0)|(1<<MUX1);
 168:	80 81       	ld	r24, Z
 16a:	83 60       	ori	r24, 0x03	; 3
 16c:	80 83       	st	Z, r24
		break;
 16e:	08 c0       	rjmp	.+16     	; 0x180 <ADC_read+0x6c>
		case sensorFive:
		ADMUX &=~ 0x1F;
 170:	ec e7       	ldi	r30, 0x7C	; 124
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 7e       	andi	r24, 0xE0	; 224
 178:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
		break;
	}
	ADCSRA |= (1<<ADSC);  //Start ADC Conversion
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC)));  //Wait for ADC Conversion to complete
 18a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 18e:	86 fd       	sbrc	r24, 6
 190:	fc cf       	rjmp	.-8      	; 0x18a <ADC_read+0x76>
	return ADC;  //Return ADC value
 192:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 196:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 19a:	08 95       	ret

0000019c <_Z17motorTimerDisablev>:
}

void motorTimerDisable(void)
{
    // Disable Timer/Counter3
    TCCR3B &= ~((1 << CS32) | (1 << CS31) | (1 << CS30));
 19c:	e1 e9       	ldi	r30, 0x91	; 145
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 7f       	andi	r24, 0xF8	; 248
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <_Z10motorsInitv>:
}

void motorsInit(void)
{
    // Configure Timer/Counter3 for correct phase mode, 255 match value, 256 prescaler, and output pins
    TCCR3A = (1 << WGM30) | (1 << COM3A1) | (1 << COM3B1); // Phase Correct PWM, 8-bit
 1a8:	81 ea       	ldi	r24, 0xA1	; 161
 1aa:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    TCCR3B = (1 << CS32); // Prescaler 256
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    LEFT_FORWARD_COMP_VALUE = 64; // Match value for Timer/Counter3
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 1bc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    RIGHT_FORWARD_COMP_VALUE = 64; // Match value for Timer/Counter3
 1c0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 1c4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>

    // Set output pins for Timer/Counter3
    DDRE |= (1 << PE3) | (1 << PE4); // Set PE3 and PE4 as output for Timer/Counter3
 1c8:	8d b1       	in	r24, 0x0d	; 13
 1ca:	88 61       	ori	r24, 0x18	; 24
 1cc:	8d b9       	out	0x0d, r24	; 13
    
    //setam pini pentru motor ca iesire cu Valorile initiale 0
    //Initializam pini pentru motor
    DDRA |= (1 << DDA0) | (1 << DDA1) | (1 << DDA2) | (1 << DDA3);
 1ce:	81 b1       	in	r24, 0x01	; 1
 1d0:	8f 60       	ori	r24, 0x0F	; 15
 1d2:	81 b9       	out	0x01, r24	; 1

    //setam in 0 pini pentru motor
    STOP_MOTORS();
 1d4:	82 b1       	in	r24, 0x02	; 2
 1d6:	85 7f       	andi	r24, 0xF5	; 245
 1d8:	82 b9       	out	0x02, r24	; 2
    motorTimerDisable();
 1da:	e0 cf       	rjmp	.-64     	; 0x19c <_Z17motorTimerDisablev>
 1dc:	08 95       	ret

000001de <_Z16motorTimerEnablev>:
}

void motorTimerEnable(void)
{
    // Enable Timer/Counter3
    TCCR3B |= (1 << CS32);
 1de:	e1 e9       	ldi	r30, 0x91	; 145
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <main>:

#include "main.h"

int main(void)
{
    ADC_init();
 1ea:	87 df       	rcall	.-242    	; 0xfa <ADC_init>
    motorsInit();
 1ec:	dd df       	rcall	.-70     	; 0x1a8 <_Z10motorsInitv>
    while (1) 
    {   
        //TEST
        if(ADC_read(MID_SENSOR) > IR_SENSOR_THRESHOLD)
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	91 df       	rcall	.-222    	; 0x114 <ADC_read>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	93 40       	sbci	r25, 0x03	; 3
 1f6:	58 f0       	brcs	.+22     	; 0x20e <main+0x24>
        {
            motorTimerDisable();
 1f8:	d1 df       	rcall	.-94     	; 0x19c <_Z17motorTimerDisablev>
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	91 ee       	ldi	r25, 0xE1	; 225
 1fe:	24 e0       	ldi	r18, 0x04	; 4
 200:	81 50       	subi	r24, 0x01	; 1
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	20 40       	sbci	r18, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x20>
 20a:	00 00       	nop
 20c:	f0 cf       	rjmp	.-32     	; 0x1ee <main+0x4>
            _delay_ms(100);
        }
		else
		{
			motorTimerEnable();
 20e:	e7 df       	rcall	.-50     	; 0x1de <_Z16motorTimerEnablev>
 210:	ee cf       	rjmp	.-36     	; 0x1ee <main+0x4>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
